#include<iostream>
using namespace std;
struct node
{
   int data;
   struct node *next;
};
class list
{
   struct node *start;
   public:
    void create()
    {
   struct node *nxt_node,*pre_node;
   int value,no,i;
   start=nxt_node=pre_node=NULL;
   cout<<"\n How many nodes :\n ";
   cin>>no;
   cout<<"Enter "<<no<<" Elements: ";
   for(i=1;i<=no;i++)
   {
      cin>>value;
      nxt_node=new node;
      nxt_node->data=value;
      nxt_node->next=NULL;
      if(start==NULL)
	 start=nxt_node;
      else
	 pre_node->next=nxt_node;
      pre_node=nxt_node;
   }
   cout<<"\n The list is created! \n";
   }
    void display()
   {
   struct node *ptr=start;
   cout<<"\n  List is \n";
   while(ptr!=NULL)
   {
      cout<<ptr->data<<" -> ";
      ptr=ptr->next;
   }
   cout<<"      ";
    }
   void merge(list,list);
};
int main()
{
   list l1,l2,l3;
   cout<<"\n Enter the First List in ascending order.\n";
   l1.create();
   cout<<"\n Enter the Second List in ascending order.\n";
   l2.create();
   cout<<"\n The first list is\n";
   l1.display();
   cout<<"\n The second list is\n";
   l2.display();
   l3.merge(l1,l2);
   l3.display();
   return (0);
}
void list::merge(list l1,list l2)
{
   struct node *nxt_node,*pre_node,*pptr,*qptr;
   int dat;
   pptr=l1.start;
   qptr=l2.start;
   start=nxt_node=pre_node=NULL;
   while(pptr!=NULL && qptr!=NULL)
   {
      if(pptr->data<=qptr->data)
      {
	 dat=pptr->data;
	 pptr=pptr->next;
      }
      else
      {
	 dat=qptr->data;
	 qptr=qptr->next;
      }
      nxt_node=new node;
      nxt_node->data=dat;
      nxt_node->next=NULL;
      if(start==NULL)
	 start=nxt_node;
      else
	 pre_node->next=nxt_node;
      pre_node=nxt_node;
   }
   if(pptr==NULL)
   {
      while(qptr!=NULL)
      {
	 nxt_node=new node;
	 nxt_node->data=qptr->data;
	 nxt_node->next=NULL;
	 if(start==NULL)
	    start=nxt_node;
	 else
	    pre_node->next=nxt_node;
	 pre_node=nxt_node;
	 qptr=qptr->next;
      }
   }
   else if(qptr==NULL)
   {
      while(pptr!=NULL)
      {
	 nxt_node=new node;
	 nxt_node->data=pptr->data;
	 nxt_node->next=NULL;
	 if(start==NULL)
	    start=nxt_node;
	 else
	    pre_node->next=nxt_node;
	 pre_node=nxt_node;
	 pptr=pptr->next;
      }
   }
   cout<<"\n Merged list\n";
   return;
}
